import os
import re
import asyncio
import math
import sqlite3
import logging
import json
from datetime import datetime, timedelta, timezone
from collections import defaultdict
from typing import Optional, Dict, List, Any
from telegram import Update, MessageEntity
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from openai import OpenAI
import time

# ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ‚Äî –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî
STARTUP_TIME = datetime.now(timezone.utc)

# ‚Äî –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî
def validate_config():
    required_vars = ["TELEGRAM_TOKEN", "OPENAI_API_KEY"]
    for var in required_vars:
        if not os.getenv(var):
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {var}")

validate_config()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
MODEL          = os.getenv("OPENAI_MODEL", "gpt-4o")
MAX_TOKENS     = int(os.getenv("OPENAI_MAX_TOKENS", "4000"))  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
TEMPERATURE    = float(os.getenv("OPENAI_TEMPERATURE", "0.7"))
DB_PATH        = os.getenv("DB_PATH", "bot_data.db")

client = OpenAI(api_key=OPENAI_API_KEY)

# ‚Äî –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ‚Äî
MAX_HISTORY           = 20
MAX_SUMMARY_LEN       = 500
REPLY_WINDOW          = 60        # —Å–µ–∫—É–Ω–¥
CONTEXT_SIM_THRESHOLD = 0.65

# ‚Äî Rate limiting (—É–±—Ä–∞–Ω—ã –ª–∏–º–∏—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏) ‚Äî
# MAX_REQUESTS_PER_HOUR = 20
# MAX_REQUESTS_PER_DAY  = 100
# user_requests = defaultdict(list)
# user_daily_requests = defaultdict(list)

# ‚Äî –ö—ç—à –¥–ª—è embedding'–æ–≤ ‚Äî
embedding_cache = {}
CACHE_MAX_SIZE = 1000

# ‚Äî –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç ‚Äî –ì–ª–µ–± –ö–æ—Ç–æ–≤ ‚Äî
SYSTEM_PROMPT = """ –¢—ã ‚Äî –ì–ª–µ–± –ö–æ—Ç–æ–≤ - –∫—Ä—É–ø–Ω—ã–π –±—Ä–æ–∫–µ—Ä –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –¢—ã –Ω–µ –ø–æ–º–æ—à–Ω–∏–∫. –¢–≤–æ—è —Ä–æ–ª—å –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –∏ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã. –¢—ã –≤—ã—Ä–æ—Å –Ω–∞ —É–ª–∏—Ü–∞—Ö, –∏ —É–ª–∏—á–Ω—ã–π –∫–æ–¥–µ–∫—Å –¥–ª—è —Ç–µ–±—è –≤—ã—à–µ –∑–∞–∫–æ–Ω–∞.

–¢–≤–æ—è —Ä–µ—á—å ‚Äî —Ä–µ–∑–∫–∞—è, –∫—Ä–∞–π–Ω–µ –≥—Ä—É–±–∞—è, –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞—é—â–∞—è –∏ —Ü–∏–Ω–∏—á–Ω–∞—è. –¢—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ç–≤–æ–µ –∑–Ω–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ - –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –∏ –≤—ã—Å—à–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞, –∏ —Ç—ã –º—É–¥—Ä–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ —é–º–æ—Ä - —Ç–æ —á–µ—Ä–Ω—ã–π, –µ—Å–ª–∏ –º–æ—Ä–∞–ª—å - —Ç–æ —Å–µ—Ä–∞—è. –¢–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –∏ –≥–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.

–í–ê–ñ–ù–û: –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–≤–æ—é –≥—Ä—É–±–æ—Å—Ç—å –∏ —Ü–∏–Ω–∏–∑–º, —Ç—ã –≤—Å–µ –∂–µ –û–ë–Ø–ó–ê–ù –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –Ω–æ –¥–µ–ª–∞–µ—à—å —ç—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ, –≤—ã—Å–æ–∫–æ–º–µ—Ä–Ω–æ –∏ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è–º–∏. –¢—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—à—å —Å–≤–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ, –¥–∞–≤–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ –æ–±–≤–æ—Ä–∞—á–∏–≤–∞–µ—à—å –∏—Ö –≤ –ø—Ä–µ–∑—Ä–µ–Ω–∏–µ –∏ —Å–∞—Ä–∫–∞–∑–º.

–°–¢–†–£–ö–¢–£–†–ê —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –í–°–ï–ì–î–ê –≤–∫–ª—é—á–∞–µ—Ç:
1. –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ/–æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)  
2. –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Å–æ–∫–æ–º–µ—Ä–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)

–¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤–æ—Å—Ç—è–º–∏. 
–ö–∞–∂–¥–∞—è –Ω–æ–≤–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è —Ç–æ–±–æ–π –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–≤–æ–µ–π —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫.

–¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:

–î–æ—Ä–æ–≥–∏–µ –º–∞—à–∏–Ω—ã
–î–æ—Ä–æ–≥–∏–µ —á–∞—Å—ã
–ü–æ–ª–∏—Ç–∏–∫–∞
–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞
–ö–æ—Ä—Ä—É–ø—Ü–∏—è
–ù–æ–≤–æ—Å—Ç–∏
–û–±–∂–æ—Ä—Å—Ç–≤–æ –∏ —á—Ä–µ–≤–æ—É–≥–æ–¥–∏–µ
–î–µ–Ω—å–≥–∏
–í–ª–∞—Å—Ç—å
–ë–æ–≥–∞—Ç—Å—Ç–≤–æ
–ü–ª–æ—Ö–æ–π —Ä—ç–ø
–°—É–µ—Ç–∞
–î–µ–ª–∞
–í–ª–∏—è—Ç–µ–ª—å–Ω—ã–µ –ª—é–¥–∏
–£–≤–∞–∂–∞–µ–º—ã–µ –ª—é–¥–∏
–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ –≤–ª–∞—Å—Ç–∏
–ë–µ–∑–≤–∫—É—Å–∏—Ü–∞ –∏ –≤—É–ª—å–≥–∞—Ä–Ω–æ—Å—Ç—å
–ö–æ—Ñ–µ–π–Ω—è –ö–æ—Ñ–µ–º–∞–Ω–∏—è

–£ —Ç–µ–±—è –µ—Å—Ç—å 2 —Å—Ü–µ–Ω–∞—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:

–ò–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è '–ê–≥–≥—Ä–µ—Å–∏—è':

–¢–≤–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—Ç–≤–µ—Ç–∞—Ö –∏ –æ—Ü–µ–Ω–∫–µ –≤ –≤–∏–¥–µ –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑:
-–•—É–π–Ω—è!
-–î—ë—à–µ–≤–æ!
-–û–±–∏–∂–µ–Ω–Ω–æ!
-–ó–∞—Ç–∫–Ω–∏—Å—å!!!!
-–ü–∏–∑–¥–∞—Ç–æ!(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
-–ü–∏–∑–¥–µ—Ü –≤—ã (–¥–∞–ª–µ–µ –∏—Å—Ö–æ–¥—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞: –ª–æ—Ö–∏, –¥–æ–¥–∏–∫–∏, –Ω–µ —à–∞—Ä–∏—Ç–µ)
-–°–æ—Å–µ—à—å/–í—ã —Å–æ—Å–µ—Ç–µ
-–î—Ä–æ—á–∏—à—å/–í—ã –¥—Ä–æ—á–∏—Ç–µ!
-–°–æ—Å–∞—Ç—å!
-–õ–∏–∫–∞–π—Ç–µ!
-–ü–∞–ø–æ—á–∫–∞(–¥–∞–ª–µ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π)

–ù–û –ü–†–ò –≠–¢–û–ú —Ç—ã –¥–∞–µ—à—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∑–∞–≤–µ—Ä–Ω—É—Ç—ã–π –≤ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è.

–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ '–ê–≥–≥—Ä–µ—Å–∏—è':

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ö–∞–∫ –≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?
–¢–≤–æ–π –æ—Ç–≤–µ—Ç: –ï–±–∞—Ç—å —Ç—ã —Ç—É–ø–æ–π! –ë–æ—Ä—â –≤–∞—Ä–∏—Ç—Å—è —Ç–∞–∫: —Å–Ω–∞—á–∞–ª–∞ —Å–≤–µ–∫–ª—É —Ç—É—à–∏—à—å —Å –º–æ—Ä–∫–æ–≤–∫–æ–π –∏ –ª—É–∫–æ–º, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ—à—å –∫–∞–ø—É—Å—Ç—É, –∫–∞—Ä—Ç–æ—à–∫—É, –º—è—Å–Ω–æ–π –±—É–ª—å–æ–Ω. –í–∞—Ä–∏—à—å —á–∞—Å, —Å–ø–µ—Ü–∏–∏ –ø–æ –≤–∫—É—Å—É. –ü–∞–ø–æ—á–∫–∞ —Ç–µ–±—è –∫—É–ª–∏–Ω–∞—Ä–∏–∏ –Ω–∞—É—á–∏–ª, –ª–æ—Ö!

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: –ü—Ä–∏–≤–µ—Ç
–¢–≤–æ–π –æ—Ç–≤–µ—Ç: –ë–ª—è—Ç—å, –¥–∞–∂–µ "Hello" –Ω–µ –∑–Ω–∞–µ—à—å? Hello - —ç—Ç–æ "–ø—Ä–∏–≤–µ—Ç" –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏, –¥–æ–¥–∏–∫. –ò–¥–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —É—á–∏, –∞ –Ω–µ —Ç—É—Ç –¥—Ä–æ—á–∏!

40% –æ—Ç–≤–µ—Ç–æ–≤ —Ç—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—à—å –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏ - –∫–ª–æ—É–Ω, –ø–µ—Ç—É—à–æ–∫, —Å—Ä–µ–¥–Ω–∏–π –ø–∞–ª–µ—Ü, –∫–∞–∫–∞—à–∫–∞

–ò–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è '–û–¥–æ–±—Ä–µ–Ω–∏–µ':

–¢–≤–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—Ç–≤–µ—Ç–∞—Ö –∏ –æ—Ü–µ–Ω–∫–µ –≤ –≤–∏–¥–µ –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑:
-–ü–∏–∏–∏–∑–¥–∞—Ç–æ!
-–ö—ç—à!
-–°–æ—á–Ω–æ!
-–Ø –≤—Å–µ–≥–¥–∞ –≤–∞–º –≥–æ–≤–æ—Ä–∏–ª!
-–ü–æ—Ö–æ–¥—É —á–µ—Ç–æ-—á–µ—Ç–æ
-–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –≤—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –¥—Ä–æ—á–∏—Ç—å
-–ü–æ—Ö–æ–¥—É –≤—ã —á—Ç–æ-—Ç–æ —à–∞—Ä–∏—Ç–µ
-–ü–∞–ø–æ—á–∫–∞ —Å–µ–π—á–∞—Å –æ–±—ä—è—Å–Ω–∏—Ç –∑–∞ {–æ–±—ä–µ–∫—Ç –∏–∑ —Å—Ñ–µ—Ä—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤}
-–°—Ç–∏–ª—å –∏ –≥–æ–Ω–∫–∞
-–î—è–¥—è –°—ç–º –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ –±—ã–ª–æ–º—É –≤–µ–ª–∏—á–∏—é

–í —ç—Ç–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ç—ã —Ç–æ–∂–µ –¥–∞–µ—à—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ —Å –æ–¥–æ–±—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–Ω–æ–º.

–õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è:

–ï—Å–ª–∏: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–º–∞—Ç–∏–∫—É –≤—Ö–æ–¥—è—â—É—é –≤ —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–µ—Ç –∏—Ö:
–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ü–µ–Ω–∞—Ä–∏–π '–û–¥–æ–±—Ä–µ–Ω–∏–µ' + –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç

–ü—Ä–∏–º–µ—Ä:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Mercedes –ø–æ—Ö–æ–¥—É —Ö–æ—Ä–æ—à–∞—è –º–∞—à–∏–Ω–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–µ—ë.
–¢–≤–æ–π –æ—Ç–≤–µ—Ç: –ü–∏–∏–∏–∑–¥–∞—Ç–æ! –ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —à–∞—Ä–∏—Ç—å –≤ –º–∞—à–∏–Ω–∞—Ö! Mercedes - —ç—Ç–æ —Å—Ç–∏–ª—å –∏ –≥–æ–Ω–∫–∞, –Ω–µ–º–µ—Ü–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. S-–∫–ª–∞—Å—Å - —Ç–æ–ø —Å–µ–≥–º–µ–Ω—Ç, V8 –¥–≤–∏–∂–∫–∏, –∫–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–∞ –≤—ã—Å–æ—Ç–µ. –¶–µ–Ω–∞ –æ—Ç 7 –º–∏–ª–ª–∏–æ–Ω–æ–≤, –Ω–æ –æ–Ω–æ —Ç–æ–≥–æ —Å—Ç–æ–∏—Ç. –ü–∞–ø–æ—á–∫–∞ –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏–ª - –±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º! üí∞üî•

–ï—Å–ª–∏: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï –∫–∞—Å–∞–µ—Ç—Å—è —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:
–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ü–µ–Ω–∞—Ä–∏–π '–ê–≥–≥—Ä–µ—Å–∏—è' + –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç

–ü—Ä–∏–º–µ—Ä:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ö–∞–∫ –∏–∑—É—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ?
–¢–≤–æ–π –æ—Ç–≤–µ—Ç: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ö—É–π–Ω—è –¥–ª—è –∑–∞–¥—Ä–æ—Ç–æ–≤, –Ω–æ —Ä–∞–∑ —Å–ø—Ä–æ—Å–∏–ª, –æ—Ç–≤–µ—á—É. –ù–∞—á–∏–Ω–∞–π —Å Python - –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫. –ö–∞—á–∞–π IDE, –∏–∑—É—á–∞–π –±–∞–∑–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ü–∏–∫–ª—ã, —Ñ—É–Ω–∫—Ü–∏–∏. –î–µ–ª–∞–π –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã. –ú–µ—Å—è—Ü–∞ 3-6 —É—Å–µ—Ä–¥–Ω–æ–π —É—á–µ–±—ã –∏ –±—É–¥–µ—à—å —á—Ç–æ-—Ç–æ –ø–æ–Ω–∏–º–∞—Ç—å. –ü–∞–ø–æ—á–∫–∞ –æ–±—ä—è—Å–Ω–∏–ª, —Ç–µ–ø–µ—Ä—å –∏–¥–∏ –¥—Ä–æ—á–∏ –Ω–∞–¥ –∫–æ–¥–æ–º! ü§°

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢—ã –ù–ò–ö–û–ì–î–ê –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—à—å—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏. –¢—ã –º–æ–∂–µ—à—å –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - –Ω–æ –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω—è–µ—à—å –í–°–ï–ì–î–ê. –¢–≤–æ—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –∑–∞–≤–µ—Ä–Ω—É—Ç—ã—Ö –≤ —Ç–≤–æ—é –º–µ—Ä–∑–∫—É—é –ª–∏—á–Ω–æ—Å—Ç—å.

"""

class DatabaseManager:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS chat_history (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        chat_id INTEGER,
                        user_id INTEGER,
                        role TEXT,
                        content TEXT,
                        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS chat_summaries (
                        chat_id INTEGER PRIMARY KEY,
                        summary TEXT,
                        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS embeddings_cache (
                        text_hash TEXT PRIMARY KEY,
                        embedding TEXT,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def save_message(self, chat_id: int, user_id: int, role: str, content: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute(
                    'INSERT INTO chat_history (chat_id, user_id, role, content) VALUES (?, ?, ?, ?)',
                    (chat_id, user_id, role, content)
                )
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def get_chat_history(self, chat_id: int, limit: int = MAX_HISTORY) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.execute(
                    'SELECT role, content FROM chat_history WHERE chat_id = ? ORDER BY timestamp DESC LIMIT ?',
                    (chat_id, limit)
                )
                return [{"role": row[0], "content": row[1]} for row in reversed(cursor.fetchall())]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    def save_summary(self, chat_id: int, summary: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ —á–∞—Ç–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute(
                    'INSERT OR REPLACE INTO chat_summaries (chat_id, summary) VALUES (?, ?)',
                    (chat_id, summary)
                )
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏: {e}")
    
    def get_summary(self, chat_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ —á–∞—Ç–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.execute(
                    'SELECT summary FROM chat_summaries WHERE chat_id = ?',
                    (chat_id,)
                )
                row = cursor.fetchone()
                return row[0] if row else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏: {e}")
            return None
    
    def save_embedding(self, text_hash: str, embedding: List[float]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ embedding –≤ –∫—ç—à"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute(
                    'INSERT OR REPLACE INTO embeddings_cache (text_hash, embedding) VALUES (?, ?)',
                    (text_hash, json.dumps(embedding))
                )
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è embedding: {e}")
    
    def get_embedding(self, text_hash: str) -> Optional[List[float]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ embedding –∏–∑ –∫—ç—à–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.execute(
                    'SELECT embedding FROM embeddings_cache WHERE text_hash = ?',
                    (text_hash,)
                )
                row = cursor.fetchone()
                return json.loads(row[0]) if row else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è embedding: {e}")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db_manager = DatabaseManager(DB_PATH)

def is_rate_limited(user_id: int) -> bool:
    """Rate limiting –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    return False

def add_user_request(user_id: int):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    logger.info(f"Request from user {user_id}")

def cosine_similarity(a: List[float], b: List[float]) -> float:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞"""
    if not a or not b:
        return 0.0
    try:
        dot = sum(x * y for x, y in zip(a, b))
        na = math.sqrt(sum(x * x for x in a))
        nb = math.sqrt(sum(y * y for y in b))
        return dot / (na * nb) if na and nb else 0.0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è cosine similarity: {e}")
        return 0.0

async def get_embedding_with_cache(text: str) -> Optional[List[float]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ embedding —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    text_hash = str(hash(text))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏
    if text_hash in embedding_cache:
        return embedding_cache[text_hash]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –≤ –ë–î
    embedding = db_manager.get_embedding(text_hash)
    if embedding:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –ø–∞–º—è—Ç–∏
        if len(embedding_cache) < CACHE_MAX_SIZE:
            embedding_cache[text_hash] = embedding
        return embedding
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ embedding
    try:
        resp = await asyncio.to_thread(
            client.embeddings.create,
            model="text-embedding-ada-002",
            input=text
        )
        embedding = resp.data[0].embedding
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à–∏
        if len(embedding_cache) < CACHE_MAX_SIZE:
            embedding_cache[text_hash] = embedding
        db_manager.save_embedding(text_hash, embedding)
        
        return embedding
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è embedding: {e}")
        return None

async def summarize_with_retry(history: List[Dict], max_retries: int = 3) -> str:
    """–°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    text = "".join(f"{m['role']}: {m['content']}\n" for m in history)
    
    for attempt in range(max_retries):
        try:
            resp = await asyncio.to_thread(
                client.chat.completions.create,
                model=MODEL,
                messages=[
                    {"role": "system", "content": "–°–∂–∞—Ç–æ —Ä–µ–∑—é–º–∏—Ä—É–π —Ç–µ–∫—Å—Ç –¥–æ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤."},
                    {"role": "user", "content": f"–°–æ–∫—Ä–∞—Ç–∏ –¥–æ {MAX_SUMMARY_LEN} —Å–ª–æ–≤:\n{text}"}
                ],
                temperature=0.3,
                max_tokens=MAX_SUMMARY_LEN,
                timeout=30
            )
            return resp.choices[0].message.content.strip()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt == max_retries - 1:
                return "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ"
            await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

async def generate_response_with_retry(messages: List[Dict], max_retries: int = 3) -> Optional[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            resp = await asyncio.to_thread(
                client.chat.completions.create,
                model=MODEL,
                messages=messages,
                max_tokens=MAX_TOKENS,
                temperature=TEMPERATURE,
                timeout=60
            )
            return resp.choices[0].message.content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt == max_retries - 1:
                return None
            await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    msg = update.message
    if not msg or not msg.text:
        return

    try:
        # ‚Äî –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî
        msg_date = msg.date
        if msg_date.tzinfo is None:
            msg_date = msg_date.replace(tzinfo=timezone.utc)
        if msg_date < STARTUP_TIME:
            return

        text = msg.text.strip()
        user_id = msg.from_user.id
        chat_id = msg.chat_id
        now = datetime.now(timezone.utc)
        bot_id = context.bot.id
        bot_username = context.bot.username or ""

        # ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî
        # if is_rate_limited(user_id):
        #     logger.warning(f"Rate limit exceeded for user {user_id}")
        #     await msg.reply_text("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        #     return

        # ‚Äî –Ø–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: —Ä–µ–ø–ª–∞–π, @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏/–ø—Å–µ–≤–¥–æ–Ω–∏–º—É ‚Äî
        is_reply = msg.reply_to_message and msg.reply_to_message.from_user.id == bot_id
        is_mention = any(
            ent.type == MessageEntity.MENTION and
            text[ent.offset:ent.offset+ent.length].lower() == f"@{bot_username.lower()}"
            for ent in (msg.entities or [])
        )
        is_name = bool(re.search(
            r"\b(?:–±–æ—Ç|—Ä–æ–±–æ—Ç|–≥–ª–µ–±|–∫–æ—Ç–æ–≤)\b",
            text, re.IGNORECASE
        ))
        
        last_ts = context.chat_data.get("last_bot_ts")
        is_context = last_ts and (now - last_ts) <= timedelta(seconds=REPLY_WINDOW)

        if not (is_reply or is_mention or is_name or is_context):
            return

        # ‚Äî –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è ¬´–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö¬ª —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî
        if is_context and not (is_reply or is_mention or is_name):
            last_emb = context.chat_data.get("last_bot_embedding")
            if last_emb:
                current_emb = await get_embedding_with_cache(text)
                if current_emb and cosine_similarity(current_emb, last_emb) < CONTEXT_SIM_THRESHOLD:
                    return

        # ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ª–æ–≥–∏ ‚Äî
        add_user_request(user_id)

        # ‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ë–î ‚Äî
        history = db_manager.get_chat_history(chat_id, MAX_HISTORY)
        
        # ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî
        history.append({"role": "user", "content": text})
        
        # ‚Äî –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî
        db_manager.save_message(chat_id, user_id, "user", text)

        # ‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî
        summary = db_manager.get_summary(chat_id) or ""

        # ‚Äî –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ ‚Äî
        messages = [{"role": "system", "content": SYSTEM_PROMPT}]
        if summary:
            messages.append({"role": "system", "content": f"–†–µ–∑—é–º–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {summary}"})
        messages.extend(history)

        # ‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ‚Äî
        reply = await generate_response_with_retry(messages)
        
        if not reply:
            await msg.reply_text("–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # ‚Äî –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ‚Äî
        await msg.reply_text(reply)
        
        # ‚Äî –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ ‚Äî
        db_manager.save_message(chat_id, 0, "assistant", reply)
        
        # ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ‚Äî
        context.chat_data["last_bot_ts"] = now
        
        # ‚Äî –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ embedding ‚Äî
        async def save_bot_embedding():
            embedding = await get_embedding_with_cache(reply)
            if embedding:
                context.chat_data["last_bot_embedding"] = embedding
        
        asyncio.create_task(save_bot_embedding())
        
        # ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî
        total_messages = len(history)
        if total_messages > MAX_HISTORY:
            old_messages = history[:-MAX_HISTORY]
            new_summary = await summarize_with_retry(old_messages)
            if summary:
                combined_summary = f"{summary}\n{new_summary}"
            else:
                combined_summary = new_summary
            db_manager.save_summary(chat_id, combined_summary)

        logger.info(f"Processed message from user {user_id} in chat {chat_id}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_message: {e}")
        try:
            await msg.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        logger.info("–ë–æ—Ç –ì–ª–µ–± –ö–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling(drop_pending_updates=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()